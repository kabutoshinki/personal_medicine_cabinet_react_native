import React, { useState } from "react";
import { Modal, View, Text, TouchableOpacity, StyleSheet, FlatList, Image, Switch } from "react-native";
import UploadImage from "./UploadImage";
import { Card, TextInput } from "react-native-paper";
import { XCircleIcon, PencilSquareIcon, EyeIcon, PencilIcon } from "react-native-heroicons/solid";
import EditPillModal from "./EditPillModal";
import ItemComponent from "./ItemComponent";
import SelectDropdown from "react-native-select-dropdown";
import { SafeAreaView } from "react-native-safe-area-context";
import color from "../utils/color";
import { BellAlertIcon, CalendarDaysIcon } from "react-native-heroicons/outline";
import DateTimePickerModal from "react-native-modal-datetime-picker";
import PeriodModal from "./PeriodModal";
const Item = ({ item, onDelete, onOption }) => (
  <View className="w-[400px]">
    <Card className="flex-auto m-1">
      <View className="flex-row justify-between items-center  border-b border-gray-600 bp-2">
        <Text className="text-lg text-center font-bold flex-1 ml-12">{item.name}</Text>
        <TouchableOpacity className=" mr-5" onPress={() => onDelete(item.id)}>
          <XCircleIcon size={25} color="red" />
        </TouchableOpacity>
      </View>
      <Card.Content className=" ">
        <View className="flex-row justify-center items-center">
          <Image source={require("../../assets/icons/add_medicine.png")} />
          <View className="flex-1">
            <Text style={{ fontSize: 16 }}>Quantity: {item.quantity}</Text>
            <Text style={{ fontSize: 16 }}>Dose: {item.dose}</Text>
          </View>
          <View>
            <TouchableOpacity onPress={() => onOption(item, "Edit")}>
              <PencilSquareIcon size={25} color="#29C5F6" />
            </TouchableOpacity>
          </View>
        </View>
        <View className="">
          <TouchableOpacity className="flex-row justify-center items-center " onPress={() => onOption(item, "View")}>
            <EyeIcon size={25} color="#29C5F6" />
            <Text className="ml-1 font-bold">View Detail</Text>
          </TouchableOpacity>
        </View>
      </Card.Content>
    </Card>
  </View>
);
const MedicineModal = ({ visible, onCancel, onSave, item, state }) => {
  const [statePill, setStatePill] = useState("");
  const [imageURI, setImageURI] = useState(null);
  const [prescription, setPrescription] = useState(null);
  const [listMedicine, setListMedicine] = useState(null);
  const [isEnabled, setIsEnabled] = useState(item?.alarm);
  const [editingPill, setEditingPill] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [periodVisible, setPeriodVisible] = useState(false);
  const [isDatePickerVisible, setIsDatePickerVisible] = useState(false);
  const [formData, setFormData] = useState({
    ...item,
    imageURI: imageURI,
    name: item?.name,
    startDate: item?.startDate,
    alarm: item?.alarm,
    period: item?.period,
  });
  const toggleSwitch = (value) => {
    setIsEnabled((previousState) => !previousState);
    handleFormChange("alarm", value);
  };
  const [startDate, setStartDate] = useState(startDate);
  useState(() => {
    setPrescription(item);
    setImageURI(item?.imageURI);
  }, []);
  console.log(formData);
  const [numberDate, typeDate] = formData?.period.split(" ");
  const [formPeriod, setFormPeriod] = useState({
    numberDate: numberDate,
    typeDate: typeDate,
  });
  const handleFormChange = (field, value) => {
    setFormData((prevFormData) => ({
      ...prevFormData,
      [field]: value,
    }));
  };

  const handleDateChange = (date) => {
    handleFormChange("startDate", date.toLocaleDateString("en-GB"));
    // setStartDate(date);
    setIsDatePickerVisible(false);
  };

  const handleSave = () => {
    onCancel();
  };
  const handleImageSelection = (imageURI) => {
    setImageURI(imageURI);
  };

  const deletePill = (id) => {
    setListPills((prevPills) => {
      const updatedPills = prevPills.filter((pill) => pill.id !== id);
      return updatedPills;
    });
  };

  const optionPill = (item, state) => {
    setEditingPill(item);
    setModalVisible(true);
    setStatePill(state);
  };
  const openDatePicker = () => {
    setIsDatePickerVisible(true);
  };

  const closeDatePicker = () => {
    setIsDatePickerVisible(false);
  };

  const openPeriod = () => {
    setPeriodVisible(true);
  };

  const closePeriodModal = () => {
    setPeriodVisible(false);
  };

  const onSavePeriod = (form) => {
    setFormPeriod(form);
    setPeriodVisible(false);

    const periodValue = form.numberDate + " " + form.typeDate;
    setFormData((prevFormData) => ({
      ...prevFormData,
      period: periodValue,
    }));
  };

  const renderItem = ({ item }) => <ItemComponent item={item} onDelete={deletePill} onOption={optionPill} />;
  return (
    <Modal visible={visible} onRequestClose={onCancel}>
      {/* <View className="w-[96%] mx-2 h-[80%] justify-center items-center mt-12 bg-slate-400"> */}
      <View className="flex-1 justify-center items-center bg-black">
        <View className="flex-1 w-[100%]">
          <SafeAreaView className="">
            <View className="flex-row justify-between items-center " style={{ backgroundColor: color.main_color }}>
              <TouchableOpacity onPress={onCancel}>
                <Text className="font-bold text-lg text-gray-700 ml-4">Cancel</Text>
              </TouchableOpacity>
              <Text className="text-center font-bold text-xl text-white flex-1">Edit Prescription</Text>
              <TouchableOpacity onPress={() => onSave(formData)}>
                <Text className="font-bold text-lg text-gray-700 mr-4">Save</Text>
              </TouchableOpacity>
            </View>
          </SafeAreaView>
          <View className="flex-1  h-full w-full  bg-white">
            <UploadImage onImageSelect={handleImageSelection} imageURI={imageURI} />
            <View className="flex-row ">
              <View className="flex-1 mx-2">
                <TextInput
                  label={"Prescription Name"}
                  left={<TextInput.Icon icon="file-document-outline" />}
                  mode="outlined"
                  className=" text-gray-700 h-14 rounded-lg"
                  value={formData?.name}
                  editable={state === "Edit" ? true : false}
                  onChangeText={(value) => handleFormChange("name", value)}
                  maxLength={15}
                  // onChangeText={(value) => handleFormChange("pillName", value)}
                />
              </View>
              <View className=" flex-row flex-1  justify-between items-center  mx-2 my-1 rounded-lg border-2 border-gray-300">
                <TextInput
                  placeholder="Period"
                  className="bg-white  rounded-lg border-b-0 font-bold flex-1"
                  underlineColor="transparent"
                  editable={false}
                  value={formData?.period}
                  left={<TextInput.Icon icon="calendar-clock-outline" />}
                  right={<TextInput.Icon icon="pencil-outline" onPress={openPeriod} />}
                />

                {periodVisible && (
                  <PeriodModal
                    visible={periodVisible}
                    onCancel={closePeriodModal}
                    initData={formPeriod}
                    onSave={onSavePeriod}
                  />
                )}
              </View>
            </View>
            <View className="flex-row">
              <View className="flex-1 flex-row justify-between items-center  m-2 rounded-lg border-2 border-gray-300">
                <TextInput
                  // label="Start Date"
                  // placeholder="Start Date"
                  value={formData?.startDate}
                  className=" text-gray-700 rounded-lg text-center bg-white flex-1 font-bold"
                  editable={false}
                  underlineColor="transparent"
                  left={<TextInput.Icon icon="calendar-start" />}
                  right={<TextInput.Icon icon="pencil-outline" onPress={openDatePicker} />}
                />
                {/* <TouchableOpacity onPress={openDatePicker} style={{ marginRight: 8 }}>
                  <PencilIcon size={24} color="black" />
                </TouchableOpacity> */}
              </View>

              <DateTimePickerModal
                isVisible={isDatePickerVisible}
                mode="date"
                onConfirm={handleDateChange}
                onCancel={closeDatePicker}
                date={startDate}
              />

              <View className="flex-[0.8] flex-row justify-between items-center  mx-2 my-2 rounded-lg border-2 border-gray-300">
                <View className="ml-4">
                  <BellAlertIcon size={30} color={"black"} />
                </View>
                <Switch
                  trackColor={{ false: "gray", true: "#34C724" }}
                  value={isEnabled}
                  thumbColor={isEnabled ? "white" : "white"}
                  onValueChange={(value) => toggleSwitch(value)}
                  className="mr-5"
                  style={{ transform: [{ scale: 1.5 }] }}
                />
              </View>
            </View>

            <View className=" mb-2 justify-center items-center">
              <Text className="text-gray-700 text-3xl font-bold  mb-2 text-center">List Medicines</Text>
              <FlatList
                data={item?.pill}
                keyExtractor={(item) => item.id}
                renderItem={renderItem}
                className="max-h-[250px]"
                contentContainerStyle={{ flexGrow: 1 }}
              ></FlatList>
            </View>

            <View className="flex-row justify-center items-center">
              <TouchableOpacity onPress={() => {}} className="bg-red-500 flex-1 py-4 rounded-lg mx-2">
                <Text className="text-white font-bold text-center">Remove Prescription</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </View>
      {modalVisible && (
        <EditPillModal
          visible={modalVisible}
          onCancel={() => setModalVisible(false)}
          item={editingPill}
          state={statePill}
        />
      )}
    </Modal>
  );
};

export default MedicineModal;
